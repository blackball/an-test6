graph indexpipeline {
	graph [ rankdir = LR ];
	node [ shape=box ];
	edge [ dir=forward ];
	node [ style=filled, fillcolor=azure2 ];
	ddobjs [ label="Deduplicated catalogue\n(.objs)" ];
	ckdt [ label="Code kd-tree\n(.ckdt)" ];
	ddquad [ label="Deduplicated quads\n(.quad)" ];
	node [ style="" ];
	quad [ label="Quads\n(.quad)" ];
	objs [ label="Healpix-ified catalogue\n(.objs)" ];
	code [ label="Quad Codes\n(.code)" ];
	ddcode [ label="Deduplicated codes\n(.code)" ];

	node [ shape=ellipse ];
	codetree [ label="codetree" ];

	objs -- deduplicate -- ddobjs

	ddobjs -- hpquads
	hpquads -- code
	hpquads -- quad

	code -- dedup_index
	quad -- dedup_index
	dedup_index -- ddcode
	dedup_index -- ddquad

	ddcode -- codetree -- ckdt
}

// render with:
//   dot -Tps2 -o pipeline.eps pipeline.dot
//   epstopng pipeline.eps

// to get bounding box:
//   gs -q -dNOPAUSE -dBATCH -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -sDEVICE=bbox pipeline.ps
// to render as png:
//   gs -q -dNOPAUSE -dBATCH -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -sDEVICE=png16m -sOutputFile=pipeline.png -g850x162 pipeline.ps
// (where 850x162 is determined by the output of the bounding-box stage)

