comma := ,
empty :=
VER := $(shell make --version | grep "GNU Make version" | gawk '{print $$4}')
ifeq ($(VER), $(empty))
  VER := $(shell make --version | grep "GNU Make" | gawk '{print $$3}')
endif
VER:=$(subst $(comma),$(empty),$(VER))
$(warning make version $(VER))
ifeq ($(VER), 3.79.1)
  $(error You are running a stupid version of Make.  Try version 3.81)
endif


CATALOG := /h/42/dstn/local/CUTS/sdss-2/an_sdss_
INDEX := sdss-16_
TEMP1 := phase1_
TEMP2 := phase2_

UNPERMUTE_QUADS := unpermute-quads
UNPERMUTE_STARS := unpermute-stars2
CODETREE        := codetree
HPQUADS         := hpquads
QUADLOCATIONS 	:= quadlocations 
CODEPROJ        := codeprojections
MATLAB		:= matlab

% s=4;
% Nside = sqrt((4*pi) / ((s/60*pi/180).^2) / 12)

CODETREE_OPTS := -R 15
HPQUADS_OPTS  := -l 4 -u 5 -n 879 -i 16 -c -x 5 -y 5 -r 8
QUADLOC_OPTS  := -n 1000
CODEPROJ_OPTS := -d

define INDEX_template
$(1) : $(addprefix $(INDEX)$(1), .quad.fits .ckdt.fits .skdt.fits)
.PHONY: $(1)

$(INDEX)$(1).quad.fits $(INDEX)$(1).ckdt.fits : \
		$(TEMP2)$(1).ckdt.fits $(TEMP2)$(1).quad.fits
	$(UNPERMUTE_QUADS) -f $(TEMP2)$(1) -o tmp.$(INDEX)$(1)
	mv tmp.$(INDEX)$(1).ckdt.fits $(INDEX)$(1).ckdt.fits
	mv tmp.$(INDEX)$(1).quad.fits $(INDEX)$(1).quad.fits

$(INDEX)$(1).skdt.fits $(TEMP2)$(1).quad.fits $(INDEX)$(1).id.fits : \
		$(CATALOG)$(1).skdt.fits $(CATALOG)$(1).id.fits $(TEMP1)$(1).quad.fits
	$(UNPERMUTE_STARS) -f $(CATALOG)$(1) -q $(TEMP1)$(1) -o tmp.$(INDEX)$(1)
	mv tmp.$(INDEX)$(1).skdt.fits $(INDEX)$(1).skdt.fits
	mv tmp.$(INDEX)$(1).id.fits   $(INDEX)$(1).id.fits
	mv tmp.$(INDEX)$(1).quad.fits $(TEMP2)$(1).quad.fits

$(TEMP2)$(1).ckdt.fits: $(TEMP1)$(1).code.fits
	$(CODETREE) $(CODETREE_OPTS) -f $(TEMP1)$(1) -o tmp.$(TEMP2)$(1)
	mv tmp.$(TEMP2)$(1).ckdt.fits $(TEMP2)$(1).ckdt.fits

$(TEMP1)$(1).quad.fits $(TEMP1)$(1).code.fits : $(CATALOG)$(1).skdt.fits
	$(HPQUADS) $(HPQUADS_OPTS) -f $(CATALOG)$(1) -o tmp.$(TEMP1)$(1)
	mv tmp.$(TEMP1)$(1).quad.fits $(TEMP1)$(1).quad.fits
	mv tmp.$(TEMP1)$(1).code.fits $(TEMP1)$(1).code.fits

.PHONY: ana$(1)
ana$(1): quad$(1).pgm proj$(1).m

.PHONY: plot$(1)
plot$(1): cp_hists$(1).eps

cp_hists$(1).eps: proj$(1).m
	echo "proj$(1); print_plots=1; plot_suffix=$(1); batch=1; codeprojections; quit" > /tmp/tmpscript$(1).m
	$(MATLAB) < /tmp/tmpscript$(1).m

quad$(1).pgm: $(INDEX)$(1).skdt.fits $(INDEX)$(1).quad.fits
	$(QUADLOCATIONS) $(QUADLOC_OPTS) -o $$@ $(INDEX)$(1)

proj$(1).m: $(INDEX)$(1).ckdt.fits
	$(CODEPROJ) $(CODEPROJ_OPTS) -F $$< > $$@

SEC += \
    $(addprefix $(TEMP1)$(1), .code.fits .quad.fits) \
    $(addprefix $(TEMP2)$(1), .ckdt.fits .quad.fits)

endef

SEC := 

$(foreach num,$(NUMS),$(eval $(call INDEX_template,$(num))))

.SECONDARY: $(SEC)

NUMS := 00 01 02 03 04 05 06 07 08 09 10 11
.PHONY: $(NUMS)

all:
	@echo try targets 00, 01, 02, ..., 11

.PHONY: anaall
anaall: quadsall.pgm

plots: $(addprefix plot, $(NUMS))
.PHONY: plots

quadsall.pgm: \
	$(addsuffix .quad.fits, $(addprefix $(INDEX), $(NUMS))) \
	$(addsuffix .skdt.fits, $(addprefix $(INDEX), $(NUMS)))
	$(QUADLOCATIONS) $(QUADLOC_OPTS) $(addprefix $(INDEX), $(NUMS)) -o $@

