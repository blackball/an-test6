August 2005 (Sam)

Here's a very brief recipe for how to solve
a Sloan field using the quads system and an index
built based on a small subset (10^6 stars) of USNO-B.
(This procedure requires about 1.5GB of disk and should take about
10 minutes on a reasonably fast machine.)

PART 1 -- Building an index based on a cut of USNO
==================================================

1) Get the catalogue to index.
  (Morad and Hogg have made a cut of USNO-B which covers roughly
  the same parts of the sky and the same magnitudes as SDSS.
  It was produced by the program in astrometry/pro/morad/usno_select.pro
  This will be our object catalogue. Just link the file 
  /global/data/scr/roweis/allstarsweep.objs to something local.)
>> ln -s /global/data/scr/roweis/allstarsweep.objs ./usno.objs

2) Build the star KD tree on these objects:
>> startree -f usno

3) Let's build a 10 million quad index at a scale of 5 arcmin.
   First, link the files we just made (in case we later want to build 
   several indices of different sizes/scales for this same catalogue):
>> ln -s ./usno.objs ./usno10M.objs
>> ln -s ./usno.skdt ./usno10M.skdt
   Now, find the quads by throwing darts (this is the time bottleneck):
>> getquads -f usno10M -b -s 5.0 -q 10000000

4) Now, we deduplicate and build an inverted index:
>> quadidx  -f usno10M -b
>> rm ./usno10M.code_; rm ./usno10M.quad_;

5) Finally, build a KD-tree in code space (this is the memory bottleneck):
>> codetree -f usno10M


PART 2 -- Solving a Sloan Field
===============================

1) Get an xy list. At this time, the system uses only the relative
   positions of objects in the field to solve. It does not use
   magnitude information, nor does it accept any hints about where
   the fields might be. Therefore, the input is simply an xy list.
   The file format is very simple: create an ASCII file field.xyls whose
   first line reads "NumFields=K" where K is the number of fields
   (could be just 1). Then for each field, there is a line of the form:
    N,x0,y0,x1,y1, ... ,xN-1,yN-1
   where N is the number of objects in the field and the x,y pairs are
   their coordinates in the image (arbitrary units, fscanf-able doubles).

   You can find one such file in 
   /global/data/scr/roweis/field-217166.xyls, 
   which was produced by the program in astrometry/pro/morad/sdssfield.pro

2) Call the solver, specifying your desired tolerance in arcseconds
   (and, at this time, whether the parity of the image needs to be
   flipped relative to the index, but that will soon be tested automatically)

>> solvexy -f usno10M -o field-217166 -m 5.0 -p

   Above, we asked for agreement to within 5.0 arcseconds and we
   told the solver to flip parity (somehow, the way Morad read USNO
   and SDSS they are flipped relative to one another).
   (The result would have been the same if we loosened the tolerance
   to 50 arcseconds, so this parameter isn't too crucial.)

   The output is a file field-217166.hits which lists all the quads 
   (if any) that agreed on how to resolve the image (ie agree on
   pointing, scale and rotation), and for each quad it lists which
   field objects are involved, which original catalogue objects
   these correspond to and what the resolver thinks the RA/DEC
   of the field corners are based on that quad.

   Currently, at least 3 code matches need to agree for us
   to claim we solved the field, and I am only outputting the best
   guess, but no diagnostic information about how much better that
   guess is than the next best guess.

   You can try to solve the same field without flipping the parity,
   and even at ten time less stringent agreement, it won't solve:

>> solvexy -f usno10M -o field-217166 -m 50.0 

   Solving now takes about 1-2minutes but many speed sacrifices have
   been made in the interests of simplicity and correctness; I think
   we can get this down to a few seconds easily. In particular, trying
   all possible quads in the test field is certainly not how we should
   be doing things...


