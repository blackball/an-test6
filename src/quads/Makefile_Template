.PHONY: all allclean clean

CC = gcc
LFLAGS = -lm

#fast
CFLAGS	= -g -Wall -DAMFAST -D__USE_FIXED_PROTOTYPES__ -DUNIX_TTY_PLATFORM \
	-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DUSE_OS_MEMORY_MANAGEMENT -I.

#	-Wshadow -Wconversion -Wstrict-prototypes -Wmissing-prototypes \
#	-Wmissing-declarations -Wredundant-decls

#debug
#CFLAGS	= -g -O0 -Wall -D__USE_FIXED_PROTOTYPES__ -DUNIX_TTY_PLATFORM -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64

OBJ = starutil.o fileutil.o xylist.o mathutil.o \
	blocklist.o kdtree/kdtree.o kdtree/kdtree_io.o healpix.o \
	hitsfile.o ioutils.o matchfile.o lsfile.o catalog.o codefile.o tic.o \
	quadfile.o intmap.o bl.o dualtree_rangesearch_2.o dualtree_2.o \
	dualtree_max_2.o

AM_OBJ = KD/command.o KD/amar.o KD/ambs.o KD/amdyv_array.o \
	KD/amdyv.o KD/amma.o KD/amiv.o KD/am_file.o KD/am_proc.o KD/am_string.o KD/am_string_array.o \
	KD/am_time.o KD/distances.o KD/genarray.o KD/hrect.o \
	fileutil_am.o starutil_am.o mathutil_am.o dualtree_rangesearch.o \
	dualtree.o dualtree_max.o

AMKD_OBJ = KD/kdtree.o KD/knn.o KD/kquery.o KD/kresult.o KD/kresults.o \
	KD/neighbors.o KD/rangesearch.o \
	kdutil.o fileutil_amkd.o

# execs that need AM's kdtree stuff
AMKD_EXECS = findcode findstar

# startree deduplicate

# execs that need AM's non-kdtree stuff
AM_EXECS = findquad 

# fieldquads

# execs that don't need AM's stuff
EXECS = get_healpix quadidx2 xylstomatlab rdlstohealpix \
	codeprojections fixmatchfile printmatchfile rdls2hpls certifiable \
	hpquads dedup_index codetree2 startree2 codetomatlab \
	printcatalog fixcatalogheader deduplicate2 randcat \
	genfields codedensity

# postmortem requires: findstar(2), findquad, certifiable

MY_OBJ = randcat.o \
  genfields.o findstar.o \
  findquad.o findcode.o starutil.o kdutil.o fileutil.o mathutil.o \
  fixcatalogheader.o codedensity.o \
  codetree2.o printcatalog.o get_healpix.o \
  solvexy2.o quadidx2.o xylstomatlab.o rdlstohealpix.o agreeable.o slave.o \
  fixmatchfile.o printmatchfile rdls2hpls.o certifiable.o agreeable2.o \
  hitlist_agreement.o hitlist_healpix.o hpquads.o \
  codeprojections.o codedensity.o startree2.o solver2.o \
  deduplicate2.o \
  test_healpix.o kdtree/test_kdtree.o

# solvexy.o fieldquads.o startree.o deduplicate.o 

ALL_OBJ = $(OBJ) $(AM_OBJ) $(AMKD_OBJ) $(MY_OBJ) 

all: $(EXECS) $(AM_EXECS) $(AMKD_EXECS) agreeable slave agreeable2

#solvexy2 


#solvexy2: solvexy2.o solver2.o hitlist_healpix.o $(OBJ)
#solvexy2: solvexy2.o solver2.o hitlist_agreement.o $(OBJ)
#	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

agreeable: agreeable.o hitlist_agreement.o $(AM_OBJ) $(OBJ)
	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

agreeable2: agreeable2.o hitlist_healpix.o $(AM_OBJ) $(OBJ)
	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

slave: slave.o solver2.o hitlist_healpix.o $(AM_OBJ) $(OBJ)
	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

$(EXECS) :: %: %.o $(OBJ) $(NOAM_OBJ)
	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

$(AM_EXECS) :: %: %.o $(OBJ) $(AM_OBJ)
	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

$(AMKD_EXECS) :: %: %.o $(OBJ) $(AMKD_OBJ) $(AM_OBJ)
	$(CC) $(CFLAGS) $(LFLAGS) $^ -o $@

CUTEST_I = -Ikdtree/CuTest

CFLAGS += $(CUTEST_I)

%.o:	%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Dependencies:           
DEPS := $(subst .o,.dep,$(ALL_OBJ))

deps: $(DEPS)
	cat *.dep > deps

%.dep : %.c
	gcc -MM $(CFLAGS) -c $< > $@

allclean:
	rm -f KD/*.o *.o $(EXECS) *~ $(DEPS) deps

clean:
	rm -f $(EXECS) $(MY_OBJ) $(OBJ) $(DEPS) deps

CUTEST_L = kdtree/CuTest/CuTest.o 

$(CUTEST_L) :: %.o : %.c
	$(CC) $(CFLAGS) -c $< -o $@ $(CUTEST_I)

CUTEST_TEST_DRIVERS = kdtree/test_kdtree test_healpix test_blocklist test_bl

tests: $(CUTEST_TEST_DRIVERS)

CUTEST_TEST_OBJS = $(addsuffix .o,$(CUTEST_TEST_DRIVERS))

$(CUTEST_TEST_DRIVERS) :: %: %.o $(CUTEST_L) $(OBJ)
	$(CC) $(CFLAGS) -o $@ $^ -lm

#$(CUTEST_TEST_OBJS) :: %.o: %.c
#	$(CC) $(CFLAGS) -c $< -o $@ $(CUTEST_I)

ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(MAKECMDGOALS),allclean)
    include deps
  endif
endif
