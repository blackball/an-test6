# This file is part of the Astrometry.net suite.
# Copyright 2006, Dustin Lang, Keir Mierle and Sam Roweis.
#
# The Astrometry.net suite is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, version 2.
#
# The Astrometry.net suite is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Astrometry.net suite ; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

.PHONY: index$(1)
index$(1) : $(addprefix $(INDEX)$(1), .quad.fits .ckdt.fits .skdt.fits)
INDEX$(1) := $(addprefix $(INDEX)$(1), .quad.fits .ckdt.fits .skdt.fits)
.PHONY: index
index: index$(1)

# "What the hell is with the "fit%" filenames?"
#  -many of our commands take multiple input files and produce multiple
#   output files.  In order to tell Make that you only need to run the
#   command ONCE to produce all the outputs, it appears that the only
#   options are to (a) use a marker file or (b) write the rule as a
#   pattern rule.  Further, it appears that the pattern cannot match to
#   the empty string, so I've made it so that the pattern rule matches with
#   stem "s".  It's really irritating, since explicit rules prevents Make
#   from testing a ton of stupid built-in implicit rules, but I can't find
#   a better way around it.  Sigh.

$(INDEX)$(1).quad.fit% $(INDEX)$(1).ckdt.fit% : \
		$(PHASE2)$(1).ckdt.fit% $(PHASE2)$(1).quad.fit%
	-$(MKDIR) $(TIMESTAMP_DIR)
	-$(MKDIR) $(LOG_DIR)
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-unpermute-quads-$(1)-start
	$(UNPERMUTE_QUADS) -f $(PHASE2)$(1) -o $(TEMPINDEX)$(1)
	$(MV) $(TEMPINDEX)$(1).ckdt.fits $(INDEX)$(1).ckdt.fits
	$(MV) $(TEMPINDEX)$(1).quad.fits $(INDEX)$(1).quad.fits
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-unpermute-quads-$(1)-done

ifeq ($(IDFILES), yes)
$(INDEX)$(1).skdt.fit% $(PHASE2)$(1).quad.fit% $(INDEX)$(1).id.fit% : \
		$(CATALOG)$(1).skdt.fit% $(CATALOG)$(1).id.fit% $(PHASE1)$(1).quad.fit%
	-$(MKDIR) $(TIMESTAMP_DIR)
	-$(MKDIR) $(LOG_DIR)
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-unpermute-stars-$(1)-start
	$(UNPERMUTE_STARS) -f $(CATALOG)$(1) -q $(PHASE1)$(1) -o $(TEMPINDEX)$(1)
	$(MV) $(TEMPINDEX)$(1).skdt.fits $(INDEX)$(1).skdt.fits
	$(MV) $(TEMPINDEX)$(1).id.fits   $(INDEX)$(1).id.fits
	$(MV) $(TEMPINDEX)$(1).quad.fits $(PHASE2)$(1).quad.fits
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-unpermute-stars-$(1)-done
else
$(INDEX)$(1).skdt.fit% $(PHASE2)$(1).quad.fit% : \
		$(CATALOG)$(1).skdt.fit% $(PHASE1)$(1).quad.fit%
	-$(MKDIR) $(TIMESTAMP_DIR)
	-$(MKDIR) $(LOG_DIR)
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-unpermute-stars-$(1)-start
	$(UNPERMUTE_STARS) -f $(CATALOG)$(1) -q $(PHASE1)$(1) -o $(TEMPINDEX)$(1)
	$(MV) $(TEMPINDEX)$(1).skdt.fits $(INDEX)$(1).skdt.fits
	$(MV) $(TEMPINDEX)$(1).quad.fits $(PHASE2)$(1).quad.fits
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-unpermute-stars-$(1)-done
endif

$(PHASE2)$(1).ckdt.fits: $(PHASE1)$(1).code.fits
	-$(MKDIR) $(TIMESTAMP_DIR)
	-$(MKDIR) $(LOG_DIR)
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-codetree-$(1)-start
	$(CODETREE) $(CODETREE_OPTS) -f $(PHASE1)$(1) -o $(TEMP2)$(1)
	$(MV) $(TEMP2)$(1).ckdt.fits $(PHASE2)$(1).ckdt.fits
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-codetree-$(1)-done

$(PHASE1)$(1).quad.fit% $(PHASE1)$(1).code.fit% : $(CATALOG)$(1).skdt.fit%
	-$(MKDIR) $(TIMESTAMP_DIR)
	-$(MKDIR) $(LOG_DIR)
	$(MKDIR) $(INDEX_DIR)
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-hpquads-$(1)-start
	$(HPQUADS) $(HPQUADS_OPTS) -f $(CATALOG)$(1) -o $(TEMP1)$(1) -F $(TEMP_NOQUADS)$(1).rd.fits
	$(MV) $(TEMP_NOQUADS)$(1).rd.fits $(NOQUADS)$(1).rd.fits
	$(MV) $(TEMP1)$(1).quad.fits $(PHASE1)$(1).quad.fits
	$(MV) $(TEMP1)$(1).code.fits $(PHASE1)$(1).code.fits
	$(TOUCH) $(TIMESTAMP_DIR)timestamp-hpquads-$(1)-done

.SECONDARY: $(PHASE2)$(1).ckdt.fits $(PHASE2)$(1).quad.fits \
	$(PHASE1)$(1).code.fits $(PHASE1)$(1).quad.fits
