Currently the way the API works is:

-you log in to the web site, and go to the "Get API key" link.  It's a
16-character random string.  You only need to do this once [until we
wipe the database].

-the API communication uses JSON wrapped to look like a normal html
form submission.  The API is a django view and has URLs starting with
http://supernova.astrometry.net/api/

-the first thing the client does is log in, sending its API key and
getting back a session key.  That session key is used in all further
calls for that session.

-we have written a python script that implements the client protocol:
it's in
  svn+ssh://astrometry.net/svn/trunk/src/astrometry/net/client.py
or
  http://trac.astrometry.net/browser/trunk/src/astrometry/net/client.py
and you'll also need api_util.py
You can grab it via:
  svn co http://astrometry.net/svn/trunk/src/astrometry/net
(you'll need to munge directories and PYTHONPATH a bit so that you can
import astrometry.net.client)

-currently the SDSS and GALEX overlay views return plots by base64
encoding them and including them in the JSON results, but there is
probably a better way to do that...  But regardless, you should be
able to get back plots if you want them.



API Calls
---------

Every client call is JSON, x-www-form-urlencoded so that it looks like
a normal HTML form submission.  The JSON is sent as the value of the
key "request-json".

For example, the login call looks like:

> python client.py --apikey XXXXXXXXXXXXXXXX --server http://nova.astrometry.net/api/
Sending to URL: http://nova.astrometry.net/api/login
Python: {'apikey': 'XXXXXXXXXXXXXXXX'}
Sending json: {"apikey": "XXXXXXXXXXXXXXXX"}
Sending form data: {'request-json': '{"apikey": "XXXXXXXXXXXXXXXX"}'}
Sending data: request-json=%7B%22apikey%22%3A+%22XXXXXXXXXXXXXXXX%22%7D
Got json: {"status": "success", "message": "authenticated user: dstndstn@gmail.com", "session": "XXXXXXXXXXXXXXXXXXXXXXXXX"}

And then all subsequent calls include that session key:



