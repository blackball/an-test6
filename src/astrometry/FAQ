
> Is there a way to plot a grid of RA and Dec on the images?

Yes -- you'll have to run the "plot-constellations" program
separately.  For example, if you have an image 1.jpg and WCS 1.wcs:

jpegtopnm 1.jpg | \
plot-constellations -w 1.wcs -o grid.png -i - -N -C -G 60

will plot an RA,Dec grid with 60-arcminute spacings.  Unfortunately
they're not labelled...

> Is there a way to get out the center of the image (RA,Dec) and pixel
> scale of the image?

Yes, run the "wcsinfo" program on a WCS file -- it prints out a bunch
of stats, in a form that's meant to be easy to parse by programs (so
it's not particularly friendly for people).  "ra_center" and
"dec_center" (in degrees) and "pixscale" (in arcsec/pixel) are what
you want.

> Is there a way to plot N and E vectors on the image?

Not yet.

> Is there a way to plot a list of your own objects on the image by
> inputing RA,Dec?

Yes -- but it's roundabout...

First, project your RA,Dec objects into pixel x,y positions:

wcs-rd2xy -w 1.wcs -i your-objs.rd -o your-objs.xy

Then plot them over the image (or annotated image).  There's not
currently a way to label them.

pngtopnm grid.png | \
plotxy -i your-objs.xy -I - -x 1 -y 1 -s X -C green -b black > objs.png

The "-x 1 -y 1" compensate for the fact that FITS calls the center of
the first pixel (1,1) rather than (0,0).

> Would your code work on all-sky images?

We assume a TAN projection, so all-sky images typically don't work,
but it should certainly be possible with a bit of tweaking, since
all-sky is really a much easier recognition problem!  One thing you
can try, if your image is big enough, is to cut out a small section
near the middle.

> I want to build an index from my own catalog.  How do I proceed?

0. There is a bug in the v 0.25 code that makes the "hpquads" program
crash when building index files containing many small quads.  If you
want to build an index with quads smaller than 2 arcmin, please
contact the email address "code2" at astrometry.net.

1. Create a FITS binary table (BINTABLE) containing RA, DEC, and MAG
columns (RA, DEC in degrees).  Add the header card "AN_FILE = RDLS" to
the primary header, eg:

  modhead your-catalog.fits AN_FILE RDLS

2. Decide how big you want the "quads" in your index to be.  This will
probably be about a third to a half of the size of your images.  For
example, for SDSS images (13x9 arcmin) we use quads from 4 to 5.6
arcmin.

Convert that size in arcminutes into a healpix grid resolution.  There
are 12 * Nside^2 HEALPix grid cells on the sky, and they are equal
area and you want the side length to be about the same as your quad
size.  For SDSS images we do:

 sidelength = 4.0
 nside = sqrt((4*pi*(180*60/pi)**2) / (12*sidelength**2))

where 4*pi is the area of the sky in radians, the (180*60/pi)**2
converts that to arcmin^2, and the 12 comes from the base-level
HEALPix grid.

3. Cut your catalog (generate a spatially-uniform, bright subsample):

  cut-an -o cut.objs -R -g -A -n 10 -N <your Nside> -d 5 \
    -j <the "jitter" (positional error) of stars in your catalog> \
    your-catalog.fits

4. Index:

  startree -i cut.objs -o cut.skdt -s

  hpquads -i cut.skdt -c temp1.code -q temp1.quad -n <your Nside> \
    -l <your lower-bound quad scale, in arcmin> \
    -u <your upper-bound quad scale, in arcmin> \
    -x 4 -y 4 -r 8 -L 20 -R \
	-I <an id number for this index -- pick any integer>

The last line controls how many quads are built, how many times any
star can be reused, and so on.  The values given here are what we use
in the index files we distribute and use in the web service.

  codetree -i temp1.code -o temp1.ckdt -s;
  unpermute-stars -s cut.skdt -S temp2.skdt -q temp1.quad -Q temp2.quad -w;
  unpermute-quads -q temp2.quad -Q temp3.quad -c temp1.ckdt -C temp2.ckdt;
  merge-index -q temp3.quad -c temp2.ckdt -s temp2.skdt -o your-index.fits

The result is "your-index.fits".  You can delete all the temp files.

These instructions are for v0.25 of the code -- for newer versions please contact
the email address 'code2' at astrometry.net.

5. Tell "solve-field" and "backend" to use the new index.

cat > backend.cfg << EOF
index your-index.fits
add_path .
inparallel
EOF

solve-field --backend-config backend.cfg ......

