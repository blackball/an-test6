import matplotlib
matplotlib.use('Agg')
from matplotlib import rc
rc('image', interpolation='nearest', cmap='gray', origin='lower')
rc('image', resample=False)
from pylab import *
import pyfits
import sys
import os.path
from astrometry.util.healpix import *

if not os.path.exists('G.fits'):
	from scipy.ndimage.filters import gaussian_filter
	I = pyfits.open('small.fits')[0].data
	G = gaussian_filter(I, sigma=1)
	pyfits.writeto('G.fits', G)
	# also need to do:
	# new-wcs -d -i G.fits -w small.fits -o G2.fits
	# mv G2.fits G.fits

# From resampling G.fits via:
#  Z=1.35; hpresample -z $Z G.fits Ghp.fits; hpresample -q -r -z $Z -w G.fits -I G.fits Ghp.fits Gunhp.fits
zoomrms = [
	(1, [1487.1, 574.931, 410.585, 355.67, 346.19, 343.514, 341.533, 339.75, 337.857, 337.017, 336.763, 336.637, 336.546, 336.428, 336.226, 335.855, 335.59, 335.383, 335.225, 334.88, 333.987, 332.145, 330.489, 328.899, 326.195, 317.39, 301.215, 287.498, 280.817, 275.812, 270.275, 265.749, 263.416, 262.681, 262.295, 261.767, 260.103, 256.824, 253.437, 251.143, 248.38, 243.633, 239.001, 237.394, 237.058, 236.97, 236.904, 236.732, 236.099, 234.57, 232.833, 231.111, 228.642, 223.743, 218.776, 216.269, 215.593, 215.415, 215.291, 214.971, 213.721, 208.763, 201.036, 197.994, 197.449, 197.367, 197.348, 197.334, 197.296, 197.111, 196.458, 195.461, 195.115, 195.041, 195.027, 195.021, 195.011, 194.967, 194.708, 193.682, 192.328, 191.828, 191.727, 191.708, 191.701, 191.691, 191.644, 191.401, 190.611, 189.779, 189.529, 189.478, 189.468, 189.464, 189.457, 189.423, 189.238, 188.246, 186.16, 184.963, ]),
	(1.2, [1128.18, 329.022, 102.793, 46.3407, 30.9148, 22.896, 16.6796, 14.1919, 13.2135, 12.3357, 11.4027, 10.5452, 9.83445, 9.27375, 8.74689, 8.14739, 7.64145, 7.35028, 7.17572, 7.03479, 6.88234, 6.71025, 6.53409, 6.37073, 6.22378, 6.12348, 6.0544, 5.99367, 5.9206, 5.81398, 5.63651, 5.43928, 5.31984, 5.26556, 5.23027, 5.18904, 5.1127, 4.9879, 4.87995, 4.82909, 4.8061, 4.78991, 4.76546, 4.70989, 4.59793, 4.46161, 4.36089, 4.30059, 4.2498, 4.1836, 4.07536, 3.95018, 3.86745, 3.82532, 3.80076, 3.77257, 3.71453, 3.60935, 3.51759, 3.47234, 3.45207, 3.43599, 3.40513, 3.32313, 3.17315, 3.02577, 2.95294, 2.92774, 2.91789, 2.91123, 2.90263, 2.88222, 2.81506, 2.59583, 2.15801, 1.79776, 1.66931, 1.63408, 1.62425, 1.61976, 1.6149, 1.6033, 1.5656, 1.44718, 1.17964, 0.8857, 0.761828, 0.72917, 0.720447, 0.717465, 0.715936, 0.714324, 0.711031, 0.701367, 0.669522, 0.573652, 0.424835, 0.347461, 0.328168, 0.323451,]),
	(1.3, [799.938, 262.25, 73.5285, 27.4409, 18.2819, 13.8334, 10.9383, 9.35584, 8.10644, 7.06302, 6.11374, 5.1901, 4.33558, 3.57182, 2.882, 2.33834, 1.91739, 1.68228, 1.54239, 1.45457, 1.39837, 1.35824, 1.32667, 1.30263, 1.28051, 1.26057, 1.24275, 1.22564, 1.20846, 1.18917, 1.16953, 1.15132, 1.13561, 1.12296, 1.11291, 1.1033, 1.09354, 1.08267, 1.06891, 1.05088, 1.02932, 1.00532, 0.975773, 0.936103, 0.885, 0.82408, 0.7516, 0.675078, 0.599617, 0.533224, 0.480966, 0.438638, 0.400161, 0.365398, 0.331418, 0.297247, 0.26388, 0.236574, 0.218624, 0.207494, 0.200943, 0.196793, 0.194009, 0.192126, 0.190791, 0.189678, 0.188656, 0.187635, 0.186451, 0.185018, 0.183327, 0.181446, 0.179565, 0.177667, 0.175745, 0.173676, 0.171121, 0.167814, 0.163093, 0.156644, 0.149217, 0.141693, 0.134114, 0.126602, 0.119168, 0.111854, 0.104758, 0.097813, 0.0910969, 0.0838579, 0.0759128, 0.0677541, 0.0603343, 0.0551802, 0.052295, 0.0506056, 0.0495229, 0.0487558, 0.0481958, 0.0477855, ]),
	(1.35, [689.862, 227.932, 55.9054, 24.2681, 15.8952, 11.5917, 9.16481, 7.79111, 6.17879, 4.35186, 2.8689, 1.83334, 1.11642, 0.742471, 0.56204, 0.460606, 0.376916, 0.300503, 0.233936, 0.182248, 0.137729, 0.104228, 0.0790978, 0.056112, 0.0368693, 0.0262043, 0.0220921, 0.0203073, 0.0194356, 0.0189855, 0.0187621, 0.0186447, 0.0185823, 0.0185489, 0.018531, 0.0185183, 0.0185074, 0.0184986, 0.0184936, 0.0184916, 0.0184908, 0.0184904, 0.0184902, 0.01849, 0.0184899, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898, 0.0184898,]),
	(1.4, [646.318, 204.503, 49.459, 19.3097, 10.5252, 6.45037, 3.70355, 2.29453, 1.39991, 0.862048, 0.573644, 0.410045, 0.292207, 0.194852, 0.111864, 0.0631388, 0.0376156, 0.02578, 0.0203687, 0.018206, 0.0174682, 0.0172678, 0.0172173, 0.0172032, 0.0171981, 0.0171963, 0.0171956, 0.0171953, 0.0171953, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952, 0.0171952,]),
]

dosteps = 'steps' in sys.argv[1:]
N = 74

# Z=1.3; hpresample -q -z $Z small.fits hp.fits; hpresample -q -r -z $Z -w small.fits -I small.fits hp.fits unhp.fits

# Zoom, RMS (resampled - original) image
zoomrms2 = [
	(1, [75.8084, 31.3131, 26.2866, 25.6617, 25.4768, 25.4366, 25.4044, 25.3643, 25.3311, 25.3098, 25.301, 25.2945, 25.2884, 25.2803, 25.264, 25.2384, 25.2111, 25.1926, 25.1701, 25.0998, 24.8908, 24.5309, 24.2154, 23.8832, 23.1841, 21.5374, 19.9126, 19.3075, 19.0443, 18.8603, 18.6892, 18.5814, 18.542, 18.5309, 18.5277, 18.525, 18.5197, 18.5088, 18.4995, 18.492, 18.4776, 18.4206, 18.1552, 17.3023, 16.5517, 16.3372, 16.2931, 16.277, 16.263, 16.2503, 16.2436, 16.2411, 16.2393, 16.2364, 16.2263, 16.179, 15.9457, 15.3514, 14.9074, 14.8024, 14.7828, 14.7791, 14.778, 14.7766, 14.7708, 14.7327, 14.5024, 13.8339, 13.3919, 13.2935, 13.2758, 13.2726, 13.2717, 13.2706, 13.2659, 13.2389, 13.0868, 12.6508, 12.3274, 12.2589, 12.2477, 12.2458, 12.2452, 12.2445, 12.2415, 12.224, 12.1282, 11.8674, 11.7067, 11.6731, 11.6678, 11.6668, 11.6664, 11.6655, 11.6612, 11.6355, 11.5093, 11.2422, 11.0958, 11.0649,]),
	(1.1, [102.304, 15.5084, 10.456, 9.33922, 9.20077, 9.16957, 9.14413, 9.1192, 9.1013, 9.09087, 9.07998, 9.06741, 9.05091, 9.03304, 9.01802, 9.0088, 9.00041, 8.98955, 8.9641, 8.90531, 8.84201, 8.81681, 8.80051, 8.76036, 8.62037, 8.44131, 8.33994, 8.26475, 8.09964, 7.63681, 6.96229, 6.61412, 6.46187, 6.26492, 5.78156, 5.15116, 4.91251, 4.84868, 4.81042, 4.77063, 4.73663, 4.70954, 4.69007, 4.67892, 4.67243, 4.66858, 4.66597, 4.66311, 4.65962, 4.65536, 4.64533, 4.61566, 4.58128, 4.56498, 4.55282, 4.52092, 4.38963, 3.94618, 3.38126, 3.18933, 3.15184, 3.13714, 3.11646, 3.07754, 3.05157, 3.04492, 3.04329, 3.04239, 3.04072, 3.03416, 2.995, 2.78195, 2.31194, 2.1085, 2.07109, 2.06424, 2.06262, 2.06193, 2.06077, 2.05461, 2.01435, 1.83955, 1.58835, 1.48476, 1.46259, 1.45854, 1.45769, 1.45714, 1.45572, 1.44925, 1.4166, 1.27573, 1.08896, 1.0372, 1.02918, 1.02771, 1.02719, 1.02665, 1.02479, 1.01417]),
	(1.2, [65.8159, 21.8449, 17.3624, 15.2633, 14.8242, 14.7433, 14.7291, 14.7189, 14.7098, 14.7003, 14.6905, 14.6735, 14.654, 14.6355, 14.6114, 14.5523, 14.4187, 14.0802, 13.1553, 11.256, 9.30448, 7.69193, 6.70907, 6.23935, 5.9781, 5.75431, 5.56202, 5.32411, 5.02732, 4.82063, 4.71482, 4.60786, 4.4349, 4.14732, 3.81334, 3.64546, 3.59751, 3.5816, 3.57363, 3.56811, 3.56093, 3.54106, 3.48178, 3.38637, 3.31843, 3.29098, 3.28201, 3.27757, 3.27157, 3.25589, 3.20809, 3.07535, 2.78152, 2.41307, 2.18965, 2.11059, 2.0877, 2.07916, 2.07136, 2.05381, 1.99108, 1.77743, 1.3275, 0.953588, 0.812872, 0.77469, 0.764528, 0.761504, 0.760173, 0.759021, 0.756827, 0.749557, 0.720594, 0.63904, 0.532855, 0.482325, 0.468416, 0.464737, 0.463541, 0.462946, 0.462328, 0.461045, 0.457329, 0.445771, 0.408874, 0.340715, 0.293285, 0.277116, 0.272423, 0.271152, 0.270649, 0.27013, 0.268888, 0.265308, 0.254306, 0.223584, 0.177609, 0.150821, 0.14264, 0.140635]),
	(1.3, [64.7577, 12.8655, 7.43637, 4.94762, 3.77732, 2.61939, 1.98455, 1.63347, 1.45648, 1.3283, 1.24435, 1.1748, 1.10201, 1.03808, 0.984895, 0.943554, 0.913339, 0.890241, 0.868705, 0.850887, 0.834732, 0.821031, 0.809404, 0.799666, 0.790486, 0.782909, 0.776234, 0.770401, 0.765095, 0.760368, 0.756065, 0.752396, 0.749189, 0.746176, 0.743308, 0.740534, 0.737892, 0.73537, 0.732929, 0.730277, 0.7275, 0.72457, 0.721424, 0.717924, 0.713766, 0.708547, 0.702068, 0.693758, 0.682364, 0.666406, 0.642792, 0.609921, 0.566362, 0.510608, 0.443256, 0.371759, 0.30328, 0.248336, 0.20757, 0.180483, 0.163505, 0.153374, 0.147478, 0.143773, 0.141256, 0.139335, 0.13772, 0.136215, 0.134747, 0.133252, 0.131748, 0.130286, 0.128964, 0.127811, 0.126812, 0.125892, 0.124996, 0.124034, 0.122875, 0.121328, 0.119099, 0.115985, 0.111806, 0.106776, 0.101202, 0.0956695, 0.0903948, 0.0853327, 0.0802148, 0.0748109, 0.0690174, 0.0627727, 0.0566537, 0.0513386, 0.0472834, 0.0443538, 0.0422505, 0.0406865, 0.0394425, 0.0383927]),
	(1.35, [62.9282, 15.7283, 9.79161, 5.7367, 3.48284, 2.10904, 1.4535, 0.952168, 0.644808, 0.407194, 0.246763, 0.139672, 0.0804637, 0.0558866, 0.0457342, 0.0403702, 0.0355468, 0.0288244, 0.0194575, 0.0118117, 0.00735074, 0.00516491, 0.00384412, 0.00295567, 0.00220717, 0.00157699, 0.00113375, 0.000892768, 0.000765546, 0.000687705, 0.00063024, 0.000585082, 0.000559513, 0.000550647, 0.000547396, 0.000545421, 0.000543872, 0.000542721, 0.000542106, 0.000541788, 0.000541612, 0.0005415, 0.00054143, 0.000541392, 0.000541376, 0.000541369, 0.000541365, 0.000541363, 0.000541362, 0.00054136, 0.000541359, 0.000541359, 0.000541359, 0.000541359, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358, 0.000541358,]),
	(1.4, [60.8894, 17.4394, 11.8438, 7.55345, 4.12098, 1.89361, 0.888472, 0.408636, 0.219644, 0.123004, 0.0740139, 0.0407662, 0.019678, 0.00943598, 0.00529717, 0.00349973, 0.00254972, 0.00183053, 0.00122214, 0.00084473, 0.000664693, 0.000578427, 0.000531417, 0.00051291, 0.000507795, 0.000506368, 0.000505754, 0.000505418, 0.000505253, 0.000505203, 0.00050519, 0.000505186, 0.000505184, 0.000505184, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183, 0.000505183,]),
	(1.5, [60.1876, 14.0107, 7.75894, 3.89989, 1.87875, 0.873863, 0.416972, 0.182234, 0.0903987, 0.0417441, 0.0203832, 0.009761, 0.00475086, 0.00249885, 0.00143191, 0.000904347, 0.000634305, 0.00050605, 0.000457094, 0.000442786, 0.0004392, 0.000438416, 0.000438233, 0.000438194, 0.000438185, 0.000438183, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182, 0.000438182,]),
	(2, [63.3154, 13.0838, 7.27894, 3.32982, 1.53667, 0.725965, 0.317017, 0.148534, 0.0659434, 0.0302667, 0.0137486, 0.00622541, 0.00285428, 0.00131059, 0.000635128, 0.000363211, 0.000274191, 0.000252709, 0.000247833, 0.000246872, 0.000246663, 0.000246621, 0.000246612, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661, 0.00024661,]),
]

clf()
culrs = ['r', (1,0.5,0), 'y', 'g', 'b', 'm', 'k', '0.5']
legp = []
legl = []
for i,(z,rms) in enumerate(zoomrms):
	p = semilogy(rms, '.-', color=culrs[i % len(culrs)])
	legp.append(p)
	legl.append('%g' % z)
xlim(0,100)
ylim(ymax=100)
xlabel('Conjugate gradients iteration # (~ CPU time)')
ylabel('(Original - Reconstructed) Image RMS (in ADU)')
title('Healpix Inverse-Resampling: effect of sampling density')
legend(legp, legl, loc='lower right')
savefig('zoomrms.png')
sys.exit(0)
	
	

I0 = pyfits.open('small.fits')[0].data
I1 = pyfits.open('unhp.fits')[0].data

clf()
imshow(I0, vmin=1000, vmax=1200)
colorbar()
title('Original image')
savefig('I0.png')
H = pyfits.open('hp.fits')[0].data

clf()
imshow(H, vmin=1000, vmax=1200)
colorbar()
title('Healpix image')
savefig('H.png')

clf()
imshow(I1, vmin=1000, vmax=1200)
colorbar()
title('Resampled image')
savefig('I1.png')

clf()
imshow(I1-I0, vmin=-10, vmax=10)
colorbar()
gray()
savefig('diff.png')

bins = linspace(900, 1100, 101)

clf()
subplot(2,1,1)
hist(I0.ravel(), bins=bins)
I0r = I0.ravel()
i = logical_and(I0r >= 900, I0r <= 1100)
mn = mean(I0r[i])
st = std(I0r[i])
plot(bins, len(I0r[i]) / (sqrt(2.*pi)*st) * (bins[1]-bins[0]) * exp(-(bins - mn)**2 / (2.*st**2)), 'r-')
title('Original image: N(%.1f, %.1f)' % (mn,st))

subplot(2,1,2)
hist(I1.ravel(), bins=bins)
I1r = I1.ravel()
i = logical_and(I1r >= 900, I1r <= 1100)
mn = mean(I1r[i])
st = std(I1r[i])
plot(bins, len(I1r[i]) / (sqrt(2.*pi)*st) * (bins[1]-bins[0]) * exp(-(bins - mn)**2 / (2.*st**2)), 'r-')
title('Resampled image: N(%.1f, %.1f)' % (mn,st))
subplots_adjust(hspace=0.25)
savefig('hists.png')

clf()
subplot(111)
title('Resampled image: pixel error distribution')
D = (I1-I0).ravel()
D.sort()
q1 = D[int(0.25 * len(D))]
q3 = D[int(0.75 * len(D))]
print '25th percentile of error:', q1
print '75th percentile of error:', q3
print 'min, max', D.min(), D.max()

hist(D, bins=linspace(D.min(), D.max(), 50), log=True)
#hist(D, bins=linspace(q1, q3, 50))
#hist((I1-I0).ravel(), bins=linspace(-25, 25, 51))
xlabel('Resampled pixel - Original pixel')
savefig('histdiffs.png')

clf()
#s0 = I0.copy()
#s0.sort()
#s1 = I1.copy()
#s1.sort()
#plot(s0, s1, 'r.', alpha=0.05)
plot(I0.ravel(), I1.ravel(), 'r.', alpha=0.05)
xlabel('Original pixel value')
ylabel('Resampled pixel value')
axis([900,1100,900,1100])
savefig('sorted.png')

ii = [0, N-1] + range(1, N-1)
RMS = zeros_like(ii).astype(float)
MED = zeros_like(RMS)

for i in ii:
	fn = 'step-%02i.fits' % i
	print 'Reading', fn
	In = pyfits.open(fn)[0].data

	D = (In - I0)[50:-50,50:-50]
	#rms = sqrt(mean((In-I0).ravel()**2))
	#med = median(abs((In-I0).ravel()))
	rms = sqrt(mean(D.ravel()**2))
	med = median(abs(D.ravel()))
	RMS[i] = rms
	MED[i] = med

	if dosteps:
		clf()
		imshow(In, vmin=1000, vmax=1200)
		colorbar()
		title('Resampled image, step %i' % i)
		savefig('Istep-%02i.png' % i)

		clf()
		imshow(In-I0, vmin=-10, vmax=10)
		colorbar()
		title('Resampled image error, step %i.  Central RMS=%.2f, Median=%.2f' % (i, rms, med))
		savefig('Ierrstep-%02i.png' % i)

clf()
plot(RMS, 'r.-')
xlabel('Iteration #')
ylabel('RMS error of central region')
title('Inverse-resampling: RMS error')
ylim(ymin=0)
savefig('rms.png')

clf()
plot(MED, 'r.-')
xlabel('Iteration #')
ylabel('Median error of central region')
title('Inverse-resampling: median error')
ylim(ymin=0)
savefig('median.png')

clf()
p1 = plot(MED, 'r.-')
p2 = plot(RMS, 'b.-')
xlabel('Iteration #')
ylabel('Error of central region')
legend((p1,p2), ('Median','RMS'))
title('Inverse-resampling error')
ylim(ymin=0)
savefig('errors.png')



clf()
semilogy(RMS, 'r.-')
xlabel('Iteration #')
ylabel('RMS error of central region')
title('Inverse-resampling: RMS error')
savefig('logrms.png')

clf()
semilogy(MED, 'r.-')
xlabel('Iteration #')
ylabel('Median error of central region')
title('Inverse-resampling: median error')
savefig('logmedian.png')

clf()
p1 = semilogy(MED, 'r.-')
p2 = semilogy(RMS, 'b.-')
xlabel('Iteration #')
ylabel('Error of central region')
legend((p1,p2), ('Median','RMS'))
title('Inverse-resampling error')
savefig('logerrors.png')
