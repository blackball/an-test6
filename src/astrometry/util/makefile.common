# This file is part of the Astrometry.net suite.
# Copyright 2006, 2007 Dustin Lang, Keir Mierle and Sam Roweis.
# Copyright 2010 Dustin Lang.
#
# The Astrometry.net suite is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, version 2.
#
# The Astrometry.net suite is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Astrometry.net suite ; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# only set CC if it hasn't already been set
# (this allows the user to override it)
## can't use "CC ?= gcc" because CC gets a default value
ifeq ($(origin CC), default)
  CC := gcc
endif

# no default rules
.SUFFIXES :=

# These are files
%.c: ;
%.h: ;
%.awk: ;
%.inc: ;
makefile.%: ;
Makefile: ;

# Cancel stupid implicit rules.
%: %,v
%: RCS/%,v
%: RCS/%
%: s.%
%: SCCS/s.%

# sh shell
AN_SHELL = /bin/sh

RANLIB := ranlib

AWK := LC_ALL=C LC_NUMERIC=EN_US awk

SED := sed

FLAGS_DEF := -g -Wall

TMPFILE := cc-out.tmp
# Test whether $(CC) accepts a particular argument; set ARG before running.
#CCTEST = $(CC) -x c -c -o $(TMPFILE) $(ARG) - < /dev/null > /dev/null 2> /dev/null && echo $(ARG)
# On MacOS, unrecognized gcc args don't cause it to return 1... look for error messages on stderr.
CCTEST = $(CC) -x c -c -o $(TMPFILE) $(ARG) - 2>&1 > /dev/null < /dev/null | grep "unrecognized\|invalid\|error:" > /dev/null || echo $(ARG)
# Test whether a particular string appears in the compiler's default environment;
# set STR before running.
DEFTEST = $(CC) -dM -E - < /dev/null 2> /dev/null | grep "$(STR)" > /dev/null

ARG := -shared
SHAREDLIBFLAGS_DEF := $(shell $(CCTEST))

ARG := -ffinite-math-only -fno-signaling-nans
FLAGS_DEF += $(shell $(CCTEST))

# gcc 3.3 on Mac doesn't support -pthread
ARG := -pthread
FLAGS_DEF += $(shell $(CCTEST))

## Below, we try to guess good compiler flags for this CPU / architecture.
## If we make an incorrect choice -- ie, the code fails in some way on the
## machine on which it was compiled, please let us know by emailing
##    code2 at astrometry.net
## If you want to override this setting, you can set the
##      ARCH_FLAGS
## environment variable in your shell.
## With gcc 4.2 and later, gcc should be able to make the optimal choice on its own.
## See the README section "I wanna go fast!" for more details.
ifneq ($(origin ARCH_FLAGS),undefined)
  FLAGS_DEF += $(ARCH_FLAGS)
else
  # Try to guess some good compiler flags for this CPU.

  # Use -march=native if it's available (gcc 4.2 and above)
  ARG := -march=native
  X := $(shell $(CCTEST))
  ifneq ($(X),)
    FLAGS_DEF += $(X)
  else
    # Try to guess -march
    MACHINE:=$(shell uname -m)
    ifeq ($(MACHINE), i686)
      # gcc before version 3.1 doesn't support "pentium4"; use "i686" instead.

      ARG := -march=pentium4
      X := $(shell $(CCTEST))
      ifneq ($(X),)
        STR := \#define __tune_pentium4__ 1
        FLAGS_DEF += $(shell $(DEFTEST) && echo "-march=pentium4" \
                                        || echo "-march=i686")
      else
        ARG := -march=i686
        FLAGS_DEF += $(shell $(CCTEST))
      endif

    else
      # make 3.79 doesn't allow multiple "else" statements, so nest 'em.
      ifeq ($(MACHINE), x86_64)
        STR := \#define __tune_k8__ 1
        FLAGS_DEF += $(shell $(DEFTEST) && echo "-march=k8")
          FLAGS_DEF += -m64
      else # ppc, ...
        FLAGS_DEF += -DNOT_686

      endif

    endif
  endif

endif

STR := __APPLE__
X := $(shell $(DEFTEST) && echo "-DNOBOOL")
ifneq ($(X),)
  # Darwin does dynamic libs differently
  ARG := -dynamic -dynamiclib
  X := $(shell $(CCTEST))
  SHAREDLIBFLAGS_DEF += $(X)
endif

SHAREDLIBFLAGS_DEF += -fPIC

# delete temp files that may have been generated by the above tests.
X := $(shell rm $(TMPFILE))

# FLAGS_DEF are gcc flags that are shared between compiling and
# linking.  CFLAGS_DEF are compile flags, LDFLAGS_DEF are link flags.

# Turn optimization on by default; this statement only sets OPTIMIZE
# if it hasn't been set already (eg, in ../Makefile)
OPTIMIZE ?= yes

ifeq ($(OPTIMIZE),yes)
  # speedy!
  FLAGS_DEF += -O3
  FLAGS_DEF += -fomit-frame-pointer
  # turn off asserts:
  FLAGS_DEF += -DNDEBUG

else
  # debuggy!
  FLAGS_DEF += -O0
  FLAGS_DEF += -g

endif

FLAGS_DEF += -fPIC

# profily!
#FLAGS_DEF += -pg

## FIXME DEBUG
#FLAGS_DEF += -fstrict-aliasing -std=c99
#FLAGS_DEF += -Wstrict-aliasing
# More strict aliasing warnings; possible false positives.
#FLAGS_DEF += -Wstrict-aliasing=2

# Put inlined function definitions in .o files.
# FLAGS_DEF += -fkeep-inline-functions

FLAGS_DEF += -Winline

# fold in the user's CFLAGS, if set...
CFLAGS_DEF := $(CFLAGS) $(FLAGS_DEF)
CFLAGS_DEF += -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
CFLAGS_DEF += -D_GNU_SOURCE

#CFLAGS_DEF += -Wextra
#CFLAGS_DEF += -Wpointer-arith
#CFLAGS_DEF += -fmudflap
#LDFLAGS_DEF += -lmudflap

# What functions were and weren't inlined?
#CFLAGS_DEF += -Winline

# Print header files that are included
#CFLAGS_DEF += -H

# fold in the user's LDFLAGS, if set...
LDFLAGS_DEF := $(LDFLAGS) $(FLAGS_DEF)

