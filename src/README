Astrometry.net code release 0.1
===============================
Copyright 2006, 2007 Michael Blanton, David W. Hogg, Dustin Lang, Keir Mierle
and Sam Roweis.

   This code is meant as an accompanyment for an upcoming paper and its main
   purpose is to allow reproduction of the results in that paper.

   This is research code only and is not intended for scientific use in reducing
   data or other analyses.

   This release includes a snapshot of all of the components of our current
   research code, including routines to:

     * Convert raw USNO and Tycho2 into FITS format for easier use
     * Uniformize, deduplicate, and cut the FITSified catalogs
     * Build indices from these cuts
     * Solve the astrometry of images using these indices

   The code includes:
     * A simple but powerful HEALPIX implementation
     * The QFITS library with several modifications
     * libkd, a compact and high-performance kdtree library

   In principle, the code in the tarball is sufficient to reproduce our entire
   astrometry system and replicate our blind astrometry results (e.g. on the
   SDSS fields).  However, this requires the entire USNO-B 1.0 catalogue which
   is about 80GB in size.  For ease of use, we are distributing our pre-cooked
   indices (about 30 GB total), which are the same files we're using for our
   web service.

QUICKSTART
----------

   To compile everything, you will need to get the following development libraries:
      * cairo
      * netpbm
      * png

   On Ubuntu or Debian-like systems, the following should suffice:
      $ sudo apt-get install libcairo2-dev libnetpbm10-dev netpbm libpng12-dev

   If you don't have and can't get these libraries, you should still be able to
   compile and use the core parts of the solver, but you will miss out on some
   eye-candy.


   Grab the code:
      $ wget http://astrometry.net/downloads/astrometry.net-0.1.tar.bz2
      $ tar xjf astrometry.net-0.1.tar.bz2
      $ cd astrometry.net-0.1

   Build the solving system:
      $ make

   If you installed the libraries listed above, build the plotting code:
      $ make extra

   Install it:
      $ make install

   By default it will be installed in  /usr/local/astrometry .
   You can override this by either:
        * editing the top-level Makefile (look for INSTALL_DIR)
     or * defining INSTALL_DIR on the command-line:
          $ INSTALL_DIR=/path/to/astrometry make install

   The astrometry solver is composed of several executables.  You may want to add
   the INSTALL_DIR/bin directory to your path:
      $ export PATH="$PATH:/usr/local/astrometry/bin"

   Next, grab some pre-cooked indices.  Each index is designed to solve images within
   a narrow range of scales.  The indices designed to solve small (angular size) images
   are rather large files, so you probably only want to grab the indices required for
   the images you wish to solve.  If you grab extra indices, the solver will run more
   slowly, but the results should be the same.

   Each index contains a large number of "landmarks" that allow our solver to identify
   your images.  The landmarks contained in each index have sizes (diameters) within a
   narrow range.  You probably want to download indices whose quads are, say, 10% to
   100% of the sizes of the images you want to solve.

   For example, let's say you have some 1-degree square field of view images.  You
   should grab indices that contain landmarks of size 0.1 to 1 degree, or 6 to 60
   arcminutes.  Referring to the table below, you should grab indices 203 through 209.

   For reference, we used index 202 alone for our SDSS tests.

   ----------------------------------------------------------------
   Index Filename          Range of landmark diameters (arcminutes)
   ----------------------------------------------------------------
   index-200.tar.bz2             2.0  -  2.8
   index-201.tar.bz2             2.8  -  4.0
   index-202.tar.bz2             4.0  -  5.6
   index-203.tar.bz2             5.6  -  8.0
   index-204.tar.bz2             8  -   11
   index-205.tar.bz2            11  -   16
   index-206.tar.bz2            16  -   22
   index-207.tar.bz2            22  -   30
   index-208.tar.bz2            30  -   42
   index-209.tar.bz2            42  -   60
   index-210+.tar.bz2           60  - 2000
   ---------------------------------------------------------------


   Download the indices you need and put them in the top-level (astrometry-0.1)
   directory.

   Install them:
      $ make install-indices

   (Or you can extract them into the INSTALL_DIR/data directory by hand.)


   Next, you can (optionally) configure the solver by editing the file
      INSTALL_DIR/etc/backend.cfg



   Finally, solve some fields.

   (If you didn't build the plotting commands, add "--no-plots" to the command
    lines below.)

   If you have the netpbm tools installed (eg, jpegtopnm):

     If you have any of indices 200 to 203:
        $ solve-field --depth 0-20 --overwrite demo/sdss.jpg

     If you have any of indices 203 to 205:
        $ solve-field --depth 0-30 -overwrite demo/apod1.jpg

     If you have any of indices 206 to 211:
        $ solve-field --depth 0-20,20-40 --overwrite --scale-low 1 demo/apod2.jpg

     If you have any of indices 210 to 214:
        $ solve-field --depth 0-20,20-30,30-50,50-60 --overwrite --scale-low 1 demo/apod3.jpg

     If you have any of indices 213 to 218:
        $ solve-field --depth 0-20,20-40,40-50 --overwrite --scale-low 10 demo/apod4.jpg

     If you have index 219:
        $ solve-field --depth 0-70 --overwrite --scale-low 30 demo/apod5.jpg


   If you don't have the netpbm tools, do this instead:

     If you have any of indices 200 to 203:
        $ solve-field --depth 0-20 --overwrite demo/sdss.xyls

     If you have any of indices 203 to 205:
        $ solve-field --depth 0-30 --overwrite demo/apod1.xyls

     If you have any of indices 206 to 211:
        $ solve-field --depth 0-20,20-40 --overwrite --scale-low 1 demo/apod2.xyls

     If you have any of indices 210 to 214:
        $ solve-field --depth 0-20,20-30,30-50,50-60 --overwrite --scale-low 1 demo/apod3.xyls

     If you have any of indices 213 to 218:
        $ solve-field --depth 0-20,20-40,40-50 --overwrite --scale-low 10 demo/apod4.xyls

     If you have index 219:
        $ solve-field --depth 0-70 --overwrite --scale-low 30 demo/apod5.xyls


   Each of these commands should solve the field and produce a number of output
   files:
       sdss-ngc.png : an annotation of the image.
       sdss.wcs : a FITS WCS header for the solution.
       sdss-objs.png : a plot of the sources (stars) we extracted from the image.
       sdss-indx.png : sources (red), plus stars from the index (green), plus the
                       landmark ("quad") used to solve the image.
       sdss-indx.xyls : a FITS BINTABLE with the pixel locations of stars from the index.
       sdss.rdls : a FITS BINTABLE with the RA,Dec of sources we extracted from the image.
       sdss.axy : a FITS BINTABLE of the sources we extracted, plus headers that
                  describe the job (how the image is going to be solved).
       sdss.solved : contains binary 1 if the field solved.
       sdss.match : a FITS BINTABLE describing the quad match that solved the image.



SOLVE-FIELDS ARGUMENTS
----------------------

   There are a few command-line arguments to solve-fields that are very important
   in determining how quickly it runs:


   *Scale of the image: if you provide bounds (lower and upper limits) on the size
    of the image you are trying to solve, solving can be much faster.  In the last
    examples above, for example, we specified that the field is at least 30 degrees
    wide: this means that we don't need to search for matches in the indices that
    contain only tiny landmarks.

    Eg, to specify that the image is between 1 and 2 degrees wide:
      solve-field --scale-units degwidth --scale-low 1 --scale-high 2

    If you know the pixel scale instead:
      solve-field --scale-units arcsecperpix --scale-low 0.386 --scale-high 0.406


   *Depth.  The solver works by looking at sources in your image, starting with the
    brightest.  It searches for all "landmarks" that can be built from the N brightest
    stars before considering star N+1.  When using several indices, it can be much
    faster to search for many landmarks in one index before switching to the next one.
    This flag lets you control when the solver switches between indices.  It also lets
    you control how much effort the solver puts in before giving up - by default it
    looks at all the sources in your image, and this can take a ridiculously long time
    for many images.

    Eg, to first look at sources 0-20 in all indices, then sources 20-30 in all indices,
    then 30-40:
       solve-field --depth 0-20,20-30,30-40
    or solve-field --depth 0-20 --depth 20-30 --depth 30-40

    Note that sources are numbered starting at zero.  Yes, we're computer science geeks.


PROBLEMS COMPILING?
-------------------

I run a hip 90's era unix derivative and cairo doesn't work.

   If you don't have or can't get cairo, you won't be able to get pretty overlay
   plots of the solutions, but the solver should still work. To build the
   solver components minus plotting, run 'make' instead of 'make extra'.

   solve-field may fail when it tries to plot stuff, but it should produce a
   WCS file and other useful stuff.

LICENSE
-------
   The Astrometry.net suite is free software licensed under the GNU GPL,
   version 2.  See the file LICENSE for the full terms of the GNU GPL.

CONTACT
-------
   Please send inquires and bug reports to code@astrometry.net .

